{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["SeasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAe,CACjBC,OAAO,CACHC,KAAM,oFACNC,SAAS,OAEbC,OAAO,CACHF,KAAM,2FACNC,SAAU,eAwBHE,EAZO,SAAAC,GAClB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIL,EAEFP,EAAaS,GAA/BP,EAFoB,EAEpBA,KAAMC,EAFc,EAEdA,SACb,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,UAAKT,EAAL,6BACZ,4BAAKD,GACL,uBAAGU,UAAS,UAAKT,EAAL,gCC5BlBU,EAAS,SAACP,GACZ,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAOE,aAAe,CAClBD,QAAU,6DAGCD,QCTTG,E,4MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEf,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAK/C,OAAGc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAC/B,uCAAaqB,KAAKX,MAAMC,eAG/BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAC/B,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,kBAAC,EAAD,CAAQO,QAAQ,sM,+BAIvB,OACG,yBAAKF,UAAU,cACVgB,KAAKC,qB,GAzBHC,IAAMC,WAgCxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.6d7309a2.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\n\r\nconst SeasonConfig = {\r\n    summer:{\r\n        text: 'Погнали на пляж!',\r\n        iconName:'sun'\r\n    },\r\n    winter:{\r\n        text: 'Бррр, тут холодно!',\r\n        iconName :'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n    if(month > 2 && month < 9){\r\n        return lat > 0 ? 'summer' : 'winter'\r\n    }else{\r\n        return lat > 0 ? 'winter' : 'summer'\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = props => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const {text, iconName} = SeasonConfig[season]\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`${iconName} icon icon-left massive`}/>\r\n            <h1>{text}</h1>\r\n            <i className={`${iconName} icon icon-right massive`}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nLoader.defaultProps = {\r\n    message : 'Загружаем...'\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay'\r\nimport Loader from './Loader'\r\n\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: ''};\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude}),\r\n            (err) => this.setState({ errorMessage: err.message})\r\n        );\r\n    }\r\n\r\n    renderContent(){\r\n        if(this.state.errorMessage && !this.state.lat){\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.lat){\r\n            return <SeasonDisplay lat={this.state.lat}/>\r\n        }\r\n\r\n        return <Loader message=\"Определяем ваше месторасположение...\"/>\r\n    }\r\n\r\n    render(){\r\n        return (\r\n           <div className='border red'>\r\n               {this.renderContent()}\r\n           </div> \r\n        )\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector(\"#root\")\r\n)"],"sourceRoot":""}